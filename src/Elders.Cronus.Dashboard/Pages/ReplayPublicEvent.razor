@page "/replay-public"
@using MudBlazor
@inherits ReplayPublicEventBase
@inject CronusClient Cronus

@if (HasValidToken is null)
{
    <Chase />
}
else if (HasValidToken == true)
{
    <MudPaper Width="400px" Class="pa-8 ma-2" Elevation="3">
        <EditForm Model="validationModel" OnValidSubmit="Success">
            <DataAnnotationsValidator />
            @if (LiveTenants is not null && LiveTenants.Any())
            {
                <p>
                    <MudSelect T="string" Label="Tenant" @bind-Value="validationModel.LiveTenant" AnchorOrigin="Origin.BottomCenter " MultiSelection="false">
                        @foreach (var tenant in LiveTenants)
                        {
                            <MudSelectItem Value="@(tenant)" />
                        }
                    </MudSelect>
                    <ValidationMessage For="@(() => validationModel.LiveTenant)" />
                </p>
            }
            else
            {
                <p>
                    <MudTextField Label="Tenant" @bind-Value="validationModel.LiveTenant" />
                    <ValidationMessage For="@(() => validationModel.LiveTenant)" />
                </p>
            }
            @if (LiveBoundedContexts is not null && LiveBoundedContexts.Any())
            {
                <p>
                    <MudSelect T="string" Label="RecipientBoundedContext" @bind-Value="validationModel.LiveBoundedContext" AnchorOrigin="Origin.BottomCenter" MultiSelection="false">
                        @foreach (var bc in LiveBoundedContexts)
                        {
                            <MudSelectItem Value="@(bc)" />
                        }
                    </MudSelect>
                    <ValidationMessage For="@(() => validationModel.LiveBoundedContext)" />
                </p>
            }
            else
            {
                <p>
                    <MudTextField Label="RecipientBoundedContext" @bind-Value="validationModel.LiveBoundedContext" />
                    <ValidationMessage For="@(() => validationModel.LiveBoundedContext)" />
                </p>
            }

            <p>
                <MudTextField Label="RecipientHandler" @bind-Value="validationModel.RecipientHandler" />
                <ValidationMessage For="@(() => validationModel.RecipientHandler)" />
            </p>

            @if (Events is not null && Events.Any())
            {
                <p>
                    <ValidationMessage For="@(() => validationModel.SourceEventTypeId)" />
                    <MudSelect Style="@($"height: auto")" T="string" Label="SourceEventTypeId" @bind-Value="validationModel.SourceEventTypeId" AnchorOrigin="Origin.BottomCenter" MultiSelection="false">
                        @foreach (var ev in Events)
                        {
                            <MudSelectItem Value="@(ev.Id)">
                                @(ev.Name)
                                <MudText style="font-size:small" Font-Size="Size.Small" Typo="Typo.body2" Color="Color.Primary"><cite>(@(ev.Id))</cite></MudText>
                            </MudSelectItem>

                        }
                    </MudSelect>
                </p>
            }
            else
            {
                <p>
                    <MudTextField Label="SourceEventTypeId" @bind-Value="validationModel.SourceEventTypeId" />
                    <ValidationMessage For="@(() => validationModel.SourceEventTypeId)" />
                </p>
            }

            <p>
                <MudDatePicker Label="Replay After" @bind-Date="validationModel.ReplayAfter" EnableTime="true"></MudDatePicker>

                <MudButton Variant="Variant.Outlined" Color="Color.Success" EndIcon="@Icons.TwoTone.HourglassEmpty" OnClick="@(_ =>
                              {
                                  validationModel.ReplayAfter = null;
                              })" Class="mt-4">
                    Empty
                </MudButton>
            </p>
            <MudButton OnClick="Reset" Variant="Variant.Outlined" Color="Color.Success" EndIcon="@Icons.TwoTone.LockReset" Class="mr-2">Reset</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Success" EndIcon="@Icons.TwoTone.Replay">Replay</MudButton>
        </EditForm>
    </MudPaper>
}
else
{
    <p>Please check your connection!</p>
}
